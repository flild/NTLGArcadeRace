//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/Car/InputSettings/CarInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CarInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CarInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CarInput"",
    ""maps"": [
        {
            ""name"": ""CarInputMap"",
            ""id"": ""8db218ff-67db-46c1-8759-8302db6ce447"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""1d51864e-2960-4f64-ad64-500543266da8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""HandBrake"",
                    ""type"": ""Button"",
                    ""id"": ""f67a2530-d42f-42c6-886e-7c9ca159cee3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""30cfc3af-0f81-457a-a4b6-59b562b7f1d7"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""70c7f70b-d0d1-4c85-97f3-69727eab7c3b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1bf25f42-3800-4ec7-b98e-e682d3bf395c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6fed48cc-e1f6-48a9-a396-17e7098198fc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1d089d7a-ecad-46e9-9ee9-2201387428e9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ebf7c0e9-8ea4-4abe-ada8-2036629b7e1e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HandBrake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CarInputMap
        m_CarInputMap = asset.FindActionMap("CarInputMap", throwIfNotFound: true);
        m_CarInputMap_Move = m_CarInputMap.FindAction("Move", throwIfNotFound: true);
        m_CarInputMap_HandBrake = m_CarInputMap.FindAction("HandBrake", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CarInputMap
    private readonly InputActionMap m_CarInputMap;
    private ICarInputMapActions m_CarInputMapActionsCallbackInterface;
    private readonly InputAction m_CarInputMap_Move;
    private readonly InputAction m_CarInputMap_HandBrake;
    public struct CarInputMapActions
    {
        private @CarInput m_Wrapper;
        public CarInputMapActions(@CarInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CarInputMap_Move;
        public InputAction @HandBrake => m_Wrapper.m_CarInputMap_HandBrake;
        public InputActionMap Get() { return m_Wrapper.m_CarInputMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CarInputMapActions set) { return set.Get(); }
        public void SetCallbacks(ICarInputMapActions instance)
        {
            if (m_Wrapper.m_CarInputMapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_CarInputMapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_CarInputMapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_CarInputMapActionsCallbackInterface.OnMove;
                @HandBrake.started -= m_Wrapper.m_CarInputMapActionsCallbackInterface.OnHandBrake;
                @HandBrake.performed -= m_Wrapper.m_CarInputMapActionsCallbackInterface.OnHandBrake;
                @HandBrake.canceled -= m_Wrapper.m_CarInputMapActionsCallbackInterface.OnHandBrake;
            }
            m_Wrapper.m_CarInputMapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @HandBrake.started += instance.OnHandBrake;
                @HandBrake.performed += instance.OnHandBrake;
                @HandBrake.canceled += instance.OnHandBrake;
            }
        }
    }
    public CarInputMapActions @CarInputMap => new CarInputMapActions(this);
    public interface ICarInputMapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnHandBrake(InputAction.CallbackContext context);
    }
}
